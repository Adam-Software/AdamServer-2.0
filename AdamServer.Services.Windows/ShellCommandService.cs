using AdamServer.Interfaces;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System;
using System.Diagnostics;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace AdamServer.Services.Windows
{
    public class ShellCommandService : IShellCommandService
    {
        private readonly ILogger<ShellCommandService> mLogger;
        //private CancellationTokenSource mCancellationToken = null;
        private TcpClient mTcpClient;


        public ShellCommandService(IServiceProvider serviceProvider) 
        {
            mLogger = serviceProvider.GetRequiredService<ILogger<ShellCommandService>>();
        }


        public async Task ExecuteCommandAsync(string command)
        {
            
            Encoding systemEncoding = Console.OutputEncoding;
            mLogger.LogTrace("Start python cmd");

            try
            {
                mTcpClient = new TcpClient();
                await RunCommand("test.py");
                mTcpClient.Close();
            }
            catch(Exception ex)
            {
                mLogger.LogWarning("{exception}", ex);
            }
        }

        public Task ExecuteAndDebugCommandAsync(string command)
        {
            throw new NotImplementedException();
        }

        public Task RunCommand(string fileSourcePath)
        {
            return Task.Run(()=>
            {
                ProcessStartInfo start = new ProcessStartInfo
                {
                    FileName = "C:\\Users\\vertigra\\Downloads\\python-3.13.0-embed-amd64\\python.exe",
                    WorkingDirectory = "C:\\Users\\vertigra\\Downloads\\python-3.13.0-embed-amd64\\",

                    Arguments = string.Format("-u -m pdb \"{0}\" \r\n", fileSourcePath),
                    UseShellExecute = false,// Do not use OS shell
                    CreateNoWindow = true, // We don't need new window
                    RedirectStandardOutput = true,// Any output, generated by application will be redirected back
                    RedirectStandardError = true, // Any error in standard output will be redirected back (for example exceptions)
                };

                mTcpClient.Connect(IPAddress.Loopback, 18000);
                using var networkStream = mTcpClient.GetStream();
                using Process process = Process.Start(start);
                using StreamReader reader = process.StandardOutput;
                reader.BaseStream.CopyTo(networkStream);
            });
        }


    }
}
