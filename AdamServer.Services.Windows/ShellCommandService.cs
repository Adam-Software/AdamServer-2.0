using AdamServer.Interfaces;
using Chell;
using System.Text;
using System;
using System.Threading.Tasks;
using static Chell.Exports;
using System.IO;
using System.Threading;
using WatsonTcp;
using System.Net.Sockets;
using System.Net;
using System.IO.Pipelines;
using Chell.Shell;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.DependencyInjection;
using Chell.IO;
using Kokuban.AnsiEscape;
using System.Diagnostics;
using static System.Net.Mime.MediaTypeNames;

namespace AdamServer.Services.Windows
{
    public class ShellCommandService : IShellCommandService
    {
        private readonly ILogger<ShellCommandService> mLogger;
        private CancellationTokenSource mCancellationToken = null;

        public ShellCommandService(IServiceProvider serviceProvider) 
        {
            mLogger = serviceProvider.GetRequiredService<ILogger<ShellCommandService>>();
        }

        TcpClient client;
        public Task ExecuteCommandAsync(string command)
        {
            
            Encoding systemEncoding = Console.OutputEncoding;
            mLogger.LogTrace("Start python cmd");

            try
            {
                client = new TcpClient
                {
                    SendBufferSize = 1024
                };
                var result = RunCommand("python.exe", "test.py");
                //await ExecuteProcessAsync(command);

            }
            catch (Exception ex)
            {

            }
            finally
            {
                //client.Close();
            }

            return Task.CompletedTask;
        }


        public Task RunCommand(string cmd, string args)
        {
            return Task.Run(async() =>
            {
                ProcessStartInfo start = new ProcessStartInfo
                {
                    FileName = "C:\\Users\\Professional\\Downloads\\python-3.13.0-embed-amd64\\python.exe",
                    WorkingDirectory = "C:\\Users\\Professional\\Downloads\\python-3.13.0-embed-amd64\\",

                    Arguments = string.Format("-u -m \"{0}\" \r\n", args),
                    UseShellExecute = false,// Do not use OS shell
                    CreateNoWindow = true, // We don't need new window
                    RedirectStandardOutput = true,// Any output, generated by application will be redirected back
                    RedirectStandardError = true, // Any error in standard output will be redirected back (for example exceptions)
                };

                client.Connect(IPAddress.Loopback, 18000);
                using var networkStream = client.GetStream();

                using Process process = Process.Start(start);
                using StreamReader reader = process.StandardOutput;
                reader.BaseStream.CopyTo(networkStream);
            });
        }
    }
}
