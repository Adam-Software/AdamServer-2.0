using AdamServer.Interfaces;
using CavemanTcp;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using Serilog.Core;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Pipelines;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace AdamServer.Services.Windows
{
    public class ShellCommandService : IShellCommandService
    {
        static Encoding systemEncoding = Console.OutputEncoding;
        private readonly ILogger<ShellCommandService> mLogger;
        //private CancellationTokenSource mCancellationToken = null;
       // private TcpClient mTcpClient;
        private CavemanTcpClient mCavemanTcpClient;

        public ShellCommandService(IServiceProvider serviceProvider) 
        {
            mLogger = serviceProvider.GetRequiredService<ILogger<ShellCommandService>>();
            mCavemanTcpClient = new CavemanTcpClient("127.0.0.1", 18000, false, null, null)
            {
                Logger = Logger,
            };

            mCavemanTcpClient.Settings.EnableConnectionMonitor = false;

            InitializeEvents();
        }

        static void Logger(string msg)
        {
            Console.WriteLine(msg);
        }

        private void InitializeEvents()
        {
            
            mCavemanTcpClient.Events.ClientConnected += (s, e) =>
            {
                Console.WriteLine("Connected to server");
            };

            mCavemanTcpClient.Events.ClientDisconnected += (s, e) =>
            {
                Console.WriteLine("Disconnected from server");
            };

            
        }
        public void ExecuteCommandAsync(string command)
        {
            Encoding systemEncoding = Console.OutputEncoding;
            mLogger.LogTrace("Start python cmd");

            try
            {
                RunCommand("test.py");
            }
            catch(Exception ex)
            {
                mLogger.LogWarning("{exception}", ex);
            }
        }

        public Task ExecuteAndDebugCommandAsync(string command)
        {
            throw new NotImplementedException();
        }

        public void RunCommand(string fileSourcePath)
        {
            Task.Run(() =>
            {
                ProcessStartInfo start = new()
                {
                    FileName = "C:\\Users\\vertigra\\Downloads\\python-3.13.0-embed-amd64\\python.exe",
                    WorkingDirectory = "C:\\Users\\vertigra\\Downloads\\python-3.13.0-embed-amd64\\",

                    Arguments = string.Format("-u -m pdb \"{0}\" \r\n", fileSourcePath),
                    UseShellExecute = false,// Do not use OS shell
                    CreateNoWindow = true, // We don't need new window
                    RedirectStandardInput = true,
                    RedirectStandardOutput = true,// Any output, generated by application will be redirected back
                    RedirectStandardError = true, // Any error in standard output will be redirected back (for example exceptions)
                };

                mCavemanTcpClient.Connect(10);
                
                /* send data from console */
                using Stream networkStream = mCavemanTcpClient.GetStream();
                using Process process = Process.Start(start);
                using StreamReader reader = process.StandardOutput;
                using StreamWriter writer = process.StandardInput;
                reader.BaseStream.CopyToAsync(networkStream);
                

                var buffer = new List<byte>();
                int bytesRead = 10;
                while (true)
                {
                    while ((bytesRead = networkStream.ReadByte()) != '\n')
                    {
                        buffer.Add((byte)bytesRead);
                    }
                    var message = systemEncoding.GetString([.. buffer]);
                    writer.WriteLine("n");  
                    mLogger.LogTrace(message);
                    buffer.Clear();
                }
            });
        }
    }
}
